//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using MySql.Data.MySqlClient;

using System.IO;
using System.Drawing;
using System.Drawing.Printing;

namespace PenjualanPembelian
{
    public class Barang
    {
        private string kodeBarang;
        private string nama;
        private int hargaJual;
        private int stok;
        private string barcode;
        private Kategori kategoriBarang;

        #region CONTRUCTORS
        public Barang()
        {
            this.KodeBarang = "";
            this.Barcode = "";
            this.Nama = "";
            this.HargaJual = 0;
            this.Stok = 0;
            // Kategori barang merupakan aggregation, harus di-create di luar class
        }
        public Barang(string kodeBarang, string barcode, string nama, int hargaJual, int stok, Kategori kategoriBarang)
        {
            this.KodeBarang = kodeBarang;
            this.Barcode = barcode;
            this.Nama = nama;
            this.HargaJual = hargaJual;
            this.Stok = stok;
            this.KategoriBarang = kategoriBarang;
        }
        #endregion

        #region PROPERTIES
        public string KodeBarang
        {
            get { return kodeBarang; }
            set { kodeBarang = value; }
        }
        
        public string Nama
        {
            get { return nama; }
            set { nama = value; }
        }
      
        public int HargaJual
        {
            get { return hargaJual; }
            set { hargaJual = value; }
        }
       
        public int Stok
        {
            get { return stok; }
            set { stok = value; }
        }
        
        public string Barcode
        {
            get { return barcode; }
            set { barcode = value; }
        }
       
        public Kategori KategoriBarang
        {
            get { return kategoriBarang; }
            set { kategoriBarang = value; }
        }
        #endregion

        #region METHODS
        public static string TambahData(Barang pBarang)
        {
            string sql = "INSERT INTO barang(KodeBarang, Barcode, Nama, HargaJual, Stok, KodeKategori) VALUES ('" + 
                          pBarang.KodeBarang + "','" + pBarang.Barcode + "','" + 
                          pBarang.Nama.Replace("'", "\\'") + "','" + 
                          pBarang.HargaJual + "','" + 
                          pBarang.Stok + "','" + pBarang.KategoriBarang.KodeKategori + "')";

            try
            {
                Koneksi.JalankanPerintahDML(sql);
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message + ". Perintah sql: " + sql;
            }
        }

        public static string GenerateKode(string pKodeKategori, out string pHasilKode)
        {
            // Format kode: xxyyy (xx: kode kategori, yyy: nomor urut)
            // Untuk membuat no urut maka dapatkan kode barang terakhir (terbesar) dari kategori tertentu
            string sql = "SELECT MAX(RIGHT(KodeBarang, 3)) FROM barang WHERE KodeKategori = '" + pKodeKategori + "'";
            pHasilKode = "";

            try
            {
                MySqlDataReader hasilData = Koneksi.JalankanPerintahQuery(sql);

                if (hasilData.Read() == true)
                {
                    if (hasilData.GetValue(0).ToString() != "")
                    {
                        int kodeTerbaru = int.Parse(hasilData.GetValue(0).ToString()) + 1;

                        // Gunakan PadLeft untuk menambahkan nol di depan kode,
                        // Contoh: Kode 1 --> 001, 11 --> 011, 111 --> 111
                        pHasilKode = pKodeKategori + kodeTerbaru.ToString().PadLeft(3, '0');
                    }
                    else
                    {
                        // Jika tidak ditemukan data dengan kategori tertentu maka kode terbaru = "001"
                        pHasilKode = pKodeKategori + "001";
                    }
                }
                return "1";
            }
            catch (Exception exc)
            {
                return exc.Message;
            }
        }

        public static string UbahData(Barang pBarang)
        {
            string sql = "UPDATE barang SET Barcode = '" + pBarang.Barcode +
                         "', Nama = '" + pBarang.Nama.Replace("'", "\\'") +
                         "', HargaJual = '" + pBarang.HargaJual +
                         "' WHERE KodeBarang = '" + pBarang.KodeBarang + "'";

            try
            {
                Koneksi.JalankanPerintahDML(sql);
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message + ". Perintah sql : " + sql;
            }
        }

        public static string BacaData(string kriteria, string nilaiKriteria, List<Barang> listHasilData)
        {
            string sql = "";
            if (kriteria == "")
            {
                sql = "SELECT B.KodeBarang, B.Barcode, B.Nama, B.HargaJual, B.Stok, B.KodeKategori, K.Nama AS NamaKategori" +
                      " FROM barang B INNER JOIN kategori K ON B.KodeKategori = K.KodeKategori";
            }
            else
            {
                sql = "SELECT B.KodeBarang, B.Barcode, B.Nama, B.HargaJual, B.Stok, B.KodeKategori, K.Nama AS NamaKategori" +
                      " FROM barang B INNER JOIN kategori K ON B.KodeKategori = K.KodeKategori" + 
                      " WHERE " + kriteria + " LIKE '%" + nilaiKriteria + "%'";
            }

            try
            {
                MySqlDataReader hasilData = Koneksi.JalankanPerintahQuery(sql);
                listHasilData.Clear();
                while (hasilData.Read() == true)
                {
                    Barang brg = new Barang();
                    brg.KodeBarang = hasilData.GetValue(0).ToString();
                    brg.Barcode = hasilData.GetValue(1).ToString();
                    brg.Nama = hasilData.GetValue(2).ToString();
                    brg.HargaJual = int.Parse(hasilData.GetValue(3).ToString());
                    brg.Stok = int.Parse(hasilData.GetValue(4).ToString());

                    Kategori katBrg = new Kategori(hasilData.GetValue(5).ToString(), hasilData.GetValue(6).ToString());
                    brg.KategoriBarang = katBrg;

                    listHasilData.Add(brg);
                }
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message + ". Perintah sql : " + sql;
            }
        }

        public static List<Barang> CariStokSedikit()
        {
            string sql = "SELECT KodeBarang, Barcode, Nama, Stok " +
                         "FROM barang " +
                         "HAVING Stok < 10";

            List<Barang> listHasilData = new List<Barang>();

            MySqlDataReader hasilData = Koneksi.JalankanPerintahQuery(sql);
            while (hasilData.Read() == true)
            {
                Barang brg = new Barang();
                brg.KodeBarang = hasilData.GetValue(0).ToString();
                brg.Barcode = hasilData.GetValue(1).ToString();
                brg.Nama = hasilData.GetValue(2).ToString();
                brg.Stok = int.Parse(hasilData.GetValue(3).ToString());

                listHasilData.Add(brg);
            }

            return listHasilData;
        }

        public static string HapusData(Barang pBarang)
        {
            string sql = "DELETE FROM barang WHERE KodeBarang = '" + pBarang.KodeBarang + "'";

            try
            {
                Koneksi.JalankanPerintahDML(sql);
                return "1";
            }
            catch (MySqlException exc)
            {
                if (exc.Number == 1451)
                {
                    return "Barang tsb tidak boleh dihapus karena sudah pernah digunakan dalam transaksi";
                }
                else
                {
                    return exc.Message + ". Perintah sql: " + sql;
                }         
            }
        }

        public static string UbahStokTerjual(string pKodeBarang, int pJumlahTerjual)
        {
            string sql = "UPDATE barang SET Stok = Stok - " + pJumlahTerjual +
                         " WHERE KodeBarang = '" + pKodeBarang + "'";

            try
            {
                Koneksi.JalankanPerintahDML(sql);

                return "1";
            }
            catch (Exception exc)
            {
                return exc.Message;
            }
        }

        public static string UbahStokTerbeli(string pKodeBarang, int pJumlahTerjual)
        {
            string sql = "UPDATE barang SET Stok = Stok + " + pJumlahTerjual +
                         " WHERE KodeBarang = '" + pKodeBarang + "'";

            try
            {
                Koneksi.JalankanPerintahDML(sql);

                return "1";
            }
            catch (Exception exc)
            {
                return exc.Message;
            }
        }

        public static string CetakNota(string pKriteria, string pNilaiKriteria, string pNamaFile)
        {
            try
            {
                List<Barang> listBarang = new List<Barang>();

                // baca data nota tertentu yang akan dicetak
                string hasilBaca = Barang.BacaData(pKriteria, pNilaiKriteria, listBarang);

                // simpan dulu isi nota yang akan ditampilkan ke objek file (StreamWrite)
                StreamWriter file = new StreamWriter(pNamaFile);

                // tampilkan info perusahaan
                file.WriteLine("Laporan Per Tanggal : " + DateTime.Now.ToShortDateString());
                file.WriteLine("");
                file.WriteLine("TOKO MAJU MAKMUR UNTUNG SELALU");
                file.WriteLine("Jl. Raya Kalirungkut Surabaya");
                file.WriteLine("Telp. (031) - 12345678");
                file.WriteLine("**".PadRight(50, '*'));
                file.WriteLine("");               

                for (int i = 0; i < listBarang.Count; i++)
                {
                    // tampilkan header nota
                    file.WriteLine("Kode Barang : " + listBarang[i].KodeBarang);
                    file.WriteLine("Barcode : " + listBarang[i].Barcode);
                    file.WriteLine("Nama : " + listBarang[i].Nama);
                    file.WriteLine("Harga Jual : " + listBarang[i].HargaJual);
                    file.WriteLine("Stok : " + listBarang[i].Stok);
                    file.WriteLine("=".PadRight(50, '='));
                }
                file.Close();

                // cetak ke printer
                Cetak c = new Cetak(pNamaFile, "Courier New", 9, 10, 10, 10, 10);
                c.CetakKePrinter("tulisan");
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message;
            }
        }
        #endregion
    }
}

