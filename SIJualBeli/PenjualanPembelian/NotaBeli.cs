//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using MySql.Data.MySqlClient;
using System.Transactions;

using System.IO;
using System.Drawing;
using System.Drawing.Printing;

namespace PenjualanPembelian
{
    public class NotaBeli
    {
        private string noNota;
        private DateTime tanggal;
        private List<NotaBeliDetil> listNotaBeliDetil; // composition
        private Pegawai pegawai; // aggregation
        private Supplier supplier; // aggregation

        #region CONSTRUCTORS
        public NotaBeli()
        {
            this.NoNota = "";
            this.Tanggal = DateTime.Now;
            this.ListNotaBeliDetil = new List<NotaBeliDetil>();
        }
        public NotaBeli(string pNoNota, DateTime pTanggal, Supplier pSupplier, Pegawai pPegawai)
        {
            this.NoNota = pNoNota;
            this.Tanggal = pTanggal;
            this.ListNotaBeliDetil = new List<NotaBeliDetil>();
            this.Supplier = pSupplier;
            this.Pegawai = pPegawai;
        }
        #endregion

        #region PROPERTIES
        public string NoNota {
            get { return noNota; }
            set { noNota = value; }
        }
        public DateTime Tanggal {
            get { return tanggal; }
            set { tanggal = value; }
        }
        public List<NotaBeliDetil> ListNotaBeliDetil {
            get { return listNotaBeliDetil;  }
            set { listNotaBeliDetil = value; }
        }
        public Pegawai Pegawai {
            get { return pegawai; }
            set { pegawai = value; }
        }
        public Supplier Supplier {
            get { return supplier; }
            set { supplier = value; }
        }
        #endregion

        #region METHODS
        public void TambahDetilBarang(Barang pBarang, int pJumlah, int pHarga)
        {
            NotaBeliDetil nbd = new NotaBeliDetil(pBarang, pJumlah, pHarga);
            this.ListNotaBeliDetil.Add(nbd);
        }

        public static string GenerateNoNota(out string pHasilNoNota)
        {
            // sql untuk mendapatkan nomor urut transaksi terakhir di tanggal hari ini (tanggal komputer)
            string sql = "SELECT SUBSTRING(NoNota, 9, 3) AS noUrutTransaksi " +
                         "FROM NotaBeli WHERE Date(Tanggal) = Date(CURRENT_DATE) " +
                         "ORDER BY NoNota DESC LIMIT 1";

            pHasilNoNota = "";

            try
            {
                MySqlDataReader hasilData = Koneksi.JalankanPerintahQuery(sql);

                string noUrutTransTerbaru = "";

                if (hasilData.Read() == true)
                {
                    int noUrutTrans = int.Parse(hasilData.GetValue(0).ToString()) + 1;
                    noUrutTransTerbaru = noUrutTrans.ToString().PadLeft(3, '0'); // jika noUrutTrans < 3
                }
                else
                {
                    noUrutTransTerbaru = "001";
                }

                string tahun = DateTime.Now.Year.ToString();
                string bulan = DateTime.Now.Month.ToString().PadLeft(2, '0');
                string tanggal = DateTime.Now.Day.ToString().PadLeft(2, '0');

                pHasilNoNota = tahun + bulan + tanggal + noUrutTransTerbaru.ToString();

                return "1";
            }
            catch (Exception exc)
            {
                return exc.Message;
            }
        }

        public static string TambahData(NotaBeli pNotaBeli)
        {
            using (var tranScope = new TransactionScope(TransactionScopeOption.RequiresNew))
            {
                // tuliskan peritnah sql 1: menambahkan data nota ke tabel NotaBeli
                string sql1 = "INSERT INTO NotaBeli(NoNota, Tanggal, KodeSupplier, KodePegawai) VALUES ('" + pNotaBeli.NoNota + "','" +
                               pNotaBeli.Tanggal.ToString("yyyy-MM-dd hh:mm:ss") + "','" + pNotaBeli.Supplier.KodeSupplier + "','" +
                               pNotaBeli.Pegawai.KodePegawai + "')";

                try
                {
                    // jalankan perintah untuk menambahkan ke tabel NotaBeli
                    Koneksi.JalankanPerintahDML(sql1);

                    //mendapatkan semua barang yg terjual dalam nota (nota jual beli)
                    for (int i = 0; i < pNotaBeli.ListNotaBeliDetil.Count; i++)
                    {
                        // perintah sql 2: menambahkan barang2 yg terjual ke tabel NotaJualDetil
                        string sql2 = "INSERT INTO NotaBeliDetil(NoNota, KodeBarang, Harga, Jumlah) VALUES ('" + pNotaBeli.NoNota + "','" +
                                      pNotaBeli.ListNotaBeliDetil[i].Barang.KodeBarang + "','" + pNotaBeli.ListNotaBeliDetil[i].Harga + "','" +
                                      pNotaBeli.ListNotaBeliDetil[i].Jumlah + "')";

                        Koneksi.JalankanPerintahDML(sql2);

                        string hasilUpdateBrg = Barang.UbahStokTerbeli(pNotaBeli.ListNotaBeliDetil[i].Barang.KodeBarang, pNotaBeli.ListNotaBeliDetil[i].Jumlah);
                    }

                    // jika semua perintah DML berhasil dijalankan
                    tranScope.Complete();

                    return "1";
                }
                catch (Exception exc)
                {
                    tranScope.Dispose();

                    return exc.Message;
                }
            }
        }

        public static string BacaData(string pKriteria, string pNilaiKriteria, List<NotaBeli> listHasilData)
        {
            string sql1 = "";
            if (pKriteria == "")
            {
                // tuliskan perintah SQL 1 : menampilkan semua data di tabel NotaBeli
                sql1 = "SELECT N.NoNota, N.Tanggal, N.KodeSupplier, Sup.Nama AS NamaSupplier, Sup.Alamat AS AlamatSupplier, N.KodePegawai, Peg.Nama AS NamaPegawai " +
                       " FROM NotaBeli N INNER JOIN Supplier Sup ON N.KodeSupplier = Sup.KodeSupplier " +
                       " INNER JOIN Pegawai Peg ON N.KodePegawai = Peg.KodePegawai " +
                       " ORDER BY N.NoNota DESC";
            }
            else
            {
                sql1 = "SELECT N.NoNota, N.Tanggal, N.KodeSupplier, Sup.Nama AS NamaSupplier, Sup.Alamat AS AlamatSupplier, N.KodePegawai, Peg.Nama AS NamaPegawai " +
                       " FROM NotaBeli N INNER JOIN Supplier Sup ON N.KodeSupplier = Sup.KodeSupplier " +
                       " INNER JOIN Pegawai Peg ON N.KodePegawai = Peg.KodePegawai " +
                       " WHERE " + pKriteria + " LIKE '%" + pNilaiKriteria + "%'" +
                       " ORDER BY N.NoNota DESC";
            }

            try
            {
                // Data reader 1 : memperoleh semua data di tabel NotaBeli
                MySqlDataReader hasilData1 = Koneksi.JalankanPerintahQuery(sql1);
                listHasilData.Clear();
                while (hasilData1.Read() == true)
                {
                    // mendapatkan nomor nota Beli dari hasil data reader
                    string nomorNota = hasilData1.GetValue(0).ToString();

                    // mendapatkan tanggal nota dari hasil data reader
                    DateTime tglNota = DateTime.Parse(hasilData1.GetValue(1).ToString());

                    // SUPPLIER yang melakukan transaksi
                    int kodeSup = int.Parse(hasilData1.GetValue(2).ToString());
                    string namaSup = hasilData1.GetValue(3).ToString();
                    string alamatSup = hasilData1.GetValue(4).ToString();

                    // create objek bertipe Supplier
                    Supplier sup = new Supplier();
                    sup.KodeSupplier = kodeSup;
                    sup.Nama = namaSup;
                    sup.Alamat = alamatSup;

                    // PEGAWAI PEMBUAT NOTA
                    int kodePeg = int.Parse(hasilData1.GetValue(5).ToString());
                    string namaPeg = hasilData1.GetValue(6).ToString();

                    // create objek bertipe Pegawai
                    Pegawai peg = new Pegawai();
                    peg.KodePegawai = kodePeg;
                    peg.Nama = namaPeg;

                    // NOTA Beli
                    NotaBeli nota = new NotaBeli(nomorNota, tglNota, sup, peg);

                    // query untuk mendapatkan detil nota Beli dari tiap nota Beli
                    // Perintah SQL 2 : mendapatkan barang yang ada di nota (dari tabel NotaBeliDetil)
                    string sql2 = "SELECT NJD.KodeBarang, B.Nama, NJD.Harga, NJD.Jumlah " +
                                  "FROM NotaBeli N INNER JOIN NotaBeliDetil NJD ON N.NoNota = NJD.NoNota " +
                                  "INNER JOIN Barang B ON NJD.KodeBarang = B.KodeBarang " +
                                  "WHERE N.NoNota = '" + nomorNota + "'";

                    // Data reader 2 : memperoleh semua data barang nota di tabel NotaBeliDetil
                    MySqlDataReader hasilData2 = Koneksi.JalankanPerintahQuery(sql2);

                    while (hasilData2.Read() == true)
                    {
                        // mendapatkan kode barang terBeli
                        string kodeBrg = hasilData2.GetValue(0).ToString();
                        string namaBrg = hasilData2.GetValue(1).ToString();

                        Barang brg = new Barang();
                        brg.KodeBarang = kodeBrg;
                        brg.Nama = namaBrg;

                        // mendapatkan harga Beli transaksi
                        int hrgBeli = int.Parse(hasilData2.GetValue(2).ToString());
                        int jumlahBeli = int.Parse(hasilData2.GetValue(3).ToString());

                        // create objek bertipe DetilNotaBeli
                        NotaBeliDetil detilNota = new NotaBeliDetil(brg, jumlahBeli, hrgBeli);

                        // simpan detil barang ke nota
                        nota.TambahDetilBarang(brg, jumlahBeli, hrgBeli);
                    }

                    // simpan ke list
                    listHasilData.Add(nota);
                }
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message;
            }
        }

        public static string CetakNota(string pKriteria, string pNilaiKriteria, string pNamaFile)
        {
            try
            {
                List<NotaBeli> listNotaBeli = new List<NotaBeli>();

                // baca data nota tertentu yang akan dicetak
                string hasilBaca = NotaBeli.BacaData(pKriteria, pNilaiKriteria, listNotaBeli);

                // simpan dulu isi nota yang akan ditampilkan ke objek file (StreamWrite)
                StreamWriter file = new StreamWriter(pNamaFile);

                for (int i = 0; i < listNotaBeli.Count; i++)
                {
                    // tampilkan info perusahaan
                    file.WriteLine("");
                    file.WriteLine("TOKO MAJU MAKMUR UNTUNG SELALU");
                    file.WriteLine("Jl. Raya Kalirungkut Surabaya");
                    file.WriteLine("Telp. (031) - 12345678");
                    file.WriteLine("**".PadRight(50, '*'));

                    // tampilkan header nota
                    file.WriteLine("No.Nota : " + listNotaBeli[i].NoNota);
                    file.WriteLine("Tanggal : " + listNotaBeli[i].Tanggal);
                    file.WriteLine("");
                    file.WriteLine("Supplier : " + listNotaBeli[i].Supplier.Nama);
                    file.WriteLine("Alamat : " + listNotaBeli[i].Supplier.Alamat);
                    file.WriteLine("");
                    file.WriteLine("Kasir : " + listNotaBeli[i].Pegawai.Nama);
                    file.WriteLine("=".PadRight(50, '='));

                    // tampilkan barang yang telah terBeli
                    int grandTotal = 0; // untuk menyimpan grandTotal nota
                    for (int j = 0; j < listNotaBeli[i].ListNotaBeliDetil.Count; j++)
                    {
                        string nama = listNotaBeli[i].ListNotaBeliDetil[j].Barang.Nama;

                        // jika nama barang terlalu panjang maka hanya ambil 30 karakter pertama saja
                        if (nama.Length > 30)
                        {
                            nama = nama.Substring(0, 30);
                        }

                        int jumlah = listNotaBeli[i].ListNotaBeliDetil[j].Jumlah;
                        int harga = listNotaBeli[i].ListNotaBeliDetil[j].Harga;
                        int subTotal = jumlah * harga;

                        file.Write(nama.PadRight(30, ' '));
                        file.Write(jumlah.ToString().PadRight(3, ' '));
                        file.Write(harga.ToString("0,###").PadLeft(7, ' ')); // agar harga ditampilkan dengan pemisah ribuan
                        file.Write(subTotal.ToString("0,###").PadLeft(10, ' ')); // agar subTotal ditampilkan dengan pemisah riuan
                        file.WriteLine("");

                        // hitung grandTotal nota
                        grandTotal = grandTotal + jumlah * harga;
                    }

                    file.WriteLine("=".PadRight(50, '='));
                    file.WriteLine("TOTAL : " + grandTotal.ToString("0,###"));
                    file.WriteLine("=".PadRight(50, '='));
                    file.WriteLine("Terima Kasih Atas Kunjungan Anda");
                    file.WriteLine("");
                }
                file.Close();

                // cetak ke printer
                Cetak c = new Cetak(pNamaFile, "Courier New", 9, 10, 10, 10, 10);
                c.CetakKePrinter("tulisan");
                return "1";
            }
            catch (MySqlException exc)
            {
                return exc.Message;
            }
        }
        #endregion
    }
}


